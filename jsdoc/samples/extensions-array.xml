<sample>

  <title>Array Extensions</title>

  <text>

    <p>
      Arrays are omniprezent in JavaScript code.  It's a very basic
      and very useful object, but unfortunately it lacks some
      functionality that we consider important.  The kind of
      functionality that we added is classic in functional languages,
      and JavaScript <em>is</em> of such kind.
    </p>

    <p>
      If you are familiar with the “prototype” framework, or if you
      programmed in Lisp, Ruby or Perl, you should recognize a lot of
      these methods.
    </p>

    <h2>foreach()</h2>

    <p>
      The standard <b>Array</b> object lacks a foreach() method.  It's
      so very common to write <b>for</b> loops to iterate arrays:
    </p>

    <pre name="dlhl" class="js">
var a = [ 1, 2, 3, 4 ];
for (var i = 0; i &lt; a.length; i++)
    alert(a[i]);
    </pre>

    <p>
      Using the foreach method, we can write the above code a lot more
      elegantly:
    </p>

    <pre name="dlhl" class="js">[1, 2, 3, 4].foreach(alert)</pre>

    <p>
      It's that easy, and it doesn't have to be any harder.  For any
      array, we can call it's <b>foreach()</b> method and pass to it a
      function reference.  As its name suggests, <b>foreach()</b> will
      call that function <em>for each</em> element of the array,
      passing it that element as the argument.
    </p>

    <p>
      Here's the declaration:
    </p>

    <pre name="dlhl" class="js">Array.prototype.foreach = function(f, obj)</pre>

    <p>
      We can pass an additional object reference to foreach(), and if
      it's present it will call <em>f</em> in the context of that
      object (that is, the keyword <b>this</b> will refer to that
      object).
    </p>

    <h3>Loop control</h3>

    <p>
      You may wonder how you can control the loop.  With a for loop,
      for example, you can <b>break</b> it before the end, or you can
      <b>continue</b> it, skipping some code; or you can simply
      <b>return</b> from it.
    </p>

    <p>
      It is possible and easy to do all this with a <b>foreach</b>
      loop too.  You can use the following global calls in the
      function that you pass to foreach:
    </p>

    <ul>
      <li>
        <b>$BREAK()</b> — immediately stops the loop.
      </li>
      <li>
        <b>$CONTINUE()</b> — continues the loop ignoring the code
        after the $CONTINUE call.
      </li>
      <li>
        <b>$RETURN(value)</b> — returns a value from the loop;
        <b>foreach</b> will automagically return this value to the
        calling code.
      </li>
    </ul>

    <p>
      $BREAK() and $RETURN() are similar, in that they both stop the
      loop, but the latter allows you to return a value from the
      foreach method.  This value is passed to the calling code.
    </p>

    <p>
      Loop control methods are implemented via exceptions, therefore
      you should only use them in functions designed for array methods
      like <b>foreach</b> or <b>map</b>.
    </p>

    <p>
      Here are some samples:
    </p>

    <pre name="dlhl" class="js">
// double the values in the first half of the array
var a = [ 1, 2, 3, 4, 5, 6 ];
a.foreach(function(val, i){
    if (i &lt; a.length / 2) {
        a[i] = val * 2;
    } else {
        $BREAK();
    }
});
// now a contains [ 2, 4, 6, 4, 5, 6 ]

// retrieve the index of the first occurence of 5
var a = [ 3, 2, 5, 6, 2, 1 ];
var pos = a.foreach(function(val, i){
    if (val == 5)
        $RETURN(i);
});
// now pos == 2
    </pre>

    <h2>map()</h2>

    <p>
      This is another important Array addition.  Many times we want to
      transforme an array into another array.  Here is a function that
      computes the square root of each element in an array, and
      returns a new array with these values.
    </p>

    <pre name="dlhl" class="js">
function getRoots(array) {
    var ret = [];
    for (var i = 0; i &lt; array.length; i++)
        ret[i] = Math.sqrt(array[i]);
    return ret;
}
var roots = getRoots([2, 4, 8, 16]);
    </pre>

    <p>
      Using the map() method, again, we can achieve elegance:
    </p>

    <pre name="dlhl" class="js">
var roots = [2, 4, 8, 16].map(Math.sqrt);
    </pre>

    <p>
      We don't even need to define a function, because the code is so
      simple.
    </p>

    <p>
      <b>map()</b> transforms an array into another array by applying
      the given function to each element of the source array and
      collecting the returned values.  It does not modify the original
      array—it returns a new one instead.
    </p>

    <p>
      Like foreach(), map() accepts an optional <b>obj</b> reference
      as the second argument.  If it is given, it will call the
      function in the context of that object.
    </p>

    <h3>map() on an array of objects</h3>

    <p>
      More often than never, you want to call an object method for all
      objects in an array.  Let's say we have an array of strings, and
      we want to transform it into an array of the uppercased version
      of those strings.  We can easily do this with map() as well:
    </p>

    <pre name="dlhl" class="js">
var uc = [ "foo", "bar", "baz" ].map("toUpperCase");
// uc now contains [ "FOO", "BAR", "BAZ" ]
    </pre>

    <p>
      When needed, we can also collect the value of a property of each
      object in an array, using the exact same syntax:
    </p>

    <pre name="dlhl" class="js">
var a = [ "John", "Doe", "William", "Mercedes" ];
var lengths = a.map("length");
// lengths now contains [ 4, 3, 7, 8 ]
    </pre>

    <p>
      map() internally detects wether the requested attribute is a
      method or a property, and acts accordingly.
    </p>

    <h3>map() and foreach()</h3>

    <p>
      Note that map() and foreach() are quite similar.  In fact, map()
      is an improved version of foreach() that happens to collect the
      values that the given function returns.  You can safely use
      map() instead of foreach() if you don't mind the minor
      performance hit.  foreach() is intentionally kept simple to
      improve speed in cases where you don't need map()'s extra
      functionality.
    </p>

    <h3>Loop control in map()</h3>

    <p>
      Because map() is designed to return a certain thing (the array
      of collected values), $RETURN() doesn't do exactly the same
      thing as it does in foreach().  Here's how these functions
      behave:
    </p>

    <ul>
      <li>
        <b>$BREAK()</b> — stops the loop; map() returns whatever
        elements were transformed and collected by that time.
      </li>
      <li>
        <b>$CONTINUE()</b> — skips the current element and continues
        to the next one.  Nothing is collected in the return array.
      </li>
      <li>
        <b>$RETURN(value)</b> — collects “value” in the return array
        and stops processing.
      </li>
    </ul>

    <p>Examples:</p>

    <pre name="dlhl" class="js">
// collect uppercase strings until we meet "stop".
var a = [ "foo", "bar", "baz", "stop", "1234", "qwer" ];
var b = a.map(function(val) {
    if (val == "stop")
        $BREAK();
    return val.toUpperCase();
});
// b is now [ "FOO", "BAR", "BAZ" ]

// collect uppercase strings until (and including!) "stop"
var a = [ "foo", "bar", "baz", "stop", "1234", "qwer" ];
var b = a.map(function(val) {
    if (val == "stop")
        $RETURN("STOP");
    return val.toUpperCase();
});
// b is now [ "FOO", "BAR", "BAZ", "STOP" ]

// collect numbers up to 5
var a = [ 1, 3, 8, 6, 4, 5, 10, 12, 15 ];
var b = a.map(function(val) {
    if (val &gt; 5)
        $CONTINUE();
    return val;
});
// b is now [1, 3, 4, 5]
    </pre>

    <h2>grep()</h2>

    <p>
      Many times you want to filter the contents of an array—that is,
      retrieve only those values that match a certain condition.  For
      this, we have the grep() method.  Here is a sample where we
      filter an initial array and collect only those elements that
      contain the letter "a".
    </p>

    <pre name="dlhl" class="js">
var names = [ "Foo", "Bar", "Baz" ];
var a = names.grep(/a/);
// a now contains "Bar", "Baz"
    </pre>

    <p>
      Grep accepts a RegExp, as in the case above, or a function.
      When a function is given, grep will call it for each element and
      collect only those elements for which that function returns a
      <b>true</b> value.
    </p>

    <p>
      Note that you cannot do loop control with grep().
    </p>

    <h2>Other Array methods</h2>

    <ul>
      <li><p>
        <b>contains(EL)</b> — will return true if the array contains
        at least one element equal to EL
      </p></li>
      <li><p>
        <b>find(EL)</b> — returns the index of the first element in
        the array equal to EL.  Returns -1 if the element is not
        found.
      </p></li>
      <li><p>
        <b>remove(EL)</b> — removes all occurrences of EL from the
        array.
      </p></li>
      <li><p>
        <b>pushUnique(EL)</b> — appends EL to the array only if it's
        not already there.
      </p></li>
    </ul>

    <h2>Array.$ (static function)</h2>

    <p>
      Many times you get to work with objects that are not real
      arrays, but they behave like one.  An example is when you need
      to work with the <b>arguments</b> variable inside a function.
      <b>arguments</b> is an implicit local variable that contains all
      arguments passed to the function and can be indexed like an
      array, but in many browsers it is <em>not</em> an array.
      Therefore, you can't call <b>foreach()</b> on it.  Same happens
      if you work with HTMLCollection elements, such as those returned
      by <b>getElementsByTagName()</b>.
    </p>

    <p>
      The <b>Array.$</b> function comes to rescue.  You can turn any
      indexable object into a real array like this:
    </p>

    <pre name="dlhl" class="js">
var headlines = Array.$(document.getElementsByTagName("h1"));
    </pre>

    <p>
      In a few cases you might also want to ignore a few elements from
      the start of the array:
    </p>

    <pre name="dlhl" class="js">
function foo(bar) {
    var otherArgs = Array.$(arguments, 1);
    alert(otherArgs.join(", "));
}
// this displays "qwer", "1234"
foo("asdf", "qwer", "1234");
    </pre>

    <p>
      Here <b>otherArgs</b> will contain the given arguments, except
      <b>bar</b>.
    </p>

  </text>

</sample>
