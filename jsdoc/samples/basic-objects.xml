<sample>

  <title>Coding style</title>

  <text>
    <p>
      You can <a href="sample://basic-events.xml">skip this
      section</a> if you wish, but if you don't understand any of the
      other code samples, please come back here.
    </p>
    <p>
      Because JavaScript doesn't have packages—all scripts execute in
      the same memory context, therefore global variables might
      clash—DynarchLIB introduces a “special syntax” for writing code.
    </p>
    <p>
      Simply, in JavaScript variables have function scope—which means
      that if we declare all things in a “.js” file inside a function,
      they are protected from the outside world, and we can therefore
      chose what to export.
    </p>
    <p>
      Here is a sample:
    </p>

    <div sample="object1" />

    <p>
      Here we create and export a Person class that we can use like an
      ordinary object.  In fact, it is an ordinary object.  It's just
      defined differently.  By embedding everything in an anonymous
      function, we can protect private data (such as the variables:
      <b>population</b>, <b>males</b>, etc.).  You are not required to
      use this style to work with DynarchLIB, but you'll definitely
      want to comply with it if you plan on modifying the toolkit code
      itself.
    </p>

    <h2>Better syntax for defining objects</h2>

    <p>
      The above code is written in “standard JavaScript style”, but
      DynarchLIB defines a new way to write objects.  Here's how we could
      rewrite the above example using this style:
    </p>

    <div sample="object1-new" />

    <p>
      The DEFINE_CLASS construct will call the function that we supply
      as the third argument immediately, given two arguments: (1)
      reference to the class (i.e. Person) and (2) reference to the
      class' prototype (Person.prototype).  I named them CLASS and
      PROTO here for clarity, but you can use whatever name you want.
      By convention, in DynarchLIB code they are named D and P.
    </p>

    <p>
      DEFINE_CLASS does a lot of magic to help you write less code.
      For a detailed introduction into some advanced JavaScript
      internals, and how I got to implement DEFINE_CLASS, please <a
      href="jsdoc/jsobjects.pdf">read this article</a>.
    </p>

    <h2>Inheritance</h2>

    <p>
      DEFINE_CLASS helps with inheritance as well.  That's what the
      second argument to DEFINE_CLASS is for (in the previous example
      it was null because our object did not have a base class).
    </p>

    <div sample="object2" />

    <p>
      In the above code we define a Programmer class which inherits
      from Person.  Note that you don't need to call the base class
      constructor, the framework does this automatically.
    </p>

    <h2>Performance considerations</h2>

    <p>
      The general style is that we try to write small and elegant code.
      Long experience tells us that heavily optimized code tends to look
      ugly, be hard to read and introduce mysterious bugs.
    </p>

    <p>
      We optimize only when it is needed.  For example, using
      〈Array::foreach()〉, 〈Array::map()〉 or 〈Array::grep()〉 can result
      in elegant code, but it's slower than a plain
      <b>for</b> loop.  But you know what?  Most of the times it doesn't
      matter.  It's still fast enough.  If you iterate an array of 1000
      elements, and for each element you need to create, say, &lt;tr&gt;
      elements in a table, then the real bottleneck is creating DOM
      elements.  That's what you want to optimize and not the for loop
      itself.  Giving up <b>foreach</b> might be faster by a few
      milliseconds, but the difference is usually ignorable.
    </p>

    <p>
      At the opposite pole there's our
      〈DlEvent._genericEventHandler()|generic event handler〉.  It can
      get called so many times a second, that a few milliseconds do
      make a sensible difference.  So I had to remove <b>foreach</b>
      calls in that code.
    </p>

    <p>
      Chose wisely when to optimize (and optimize late if possible).
    </p>

    <h3>Harmless optimizations</h3>

    <p>
      There are cases, though, when writing optimized code from the
      start won't affect readability or stability.  For example if you
      frequently access a variable named "Foo.Bar.Baz", then it makes
      sense to create a “local alias” to it:
    </p>

    <pre name="dlhl" class="js">
      var BAZ = Foo.Bar.Baz;
      // use BAZ instead of Foo.Bar.Baz from now on
    </pre>

    <p>
      It not only reduces the number of symbol lookups that the JS
      interpreter must to, but it also reduces the overall code size
      and actually improves readability. :) But you need to be careful
      about assignments:
    </p>

    <pre name="dlhl" class="js">
      // Foo.Bar.Baz = "something";
      BAZ = "something"; // this won't be the same
    </pre>

  </text>

  <code id="object1" type="js"><![CDATA[
// declare this global variable, because we want to export this object
var Person;

// declare and instantly call an anonymous function who's only
// purpose is to hide variables
(function(){

    // global ("static", if you wish) variables that are accessible
    // only for the Person object

    var population = [];
    var males = 0;
    var females = 0;
    var totalAge = 0;

    Person = function(name, age, sex) {
        this.name = name;
        this.age = age;
        this.sex = sex;
        population.push(this);
        totalAge += age;
        if (sex == "M")
            males++;
        else
            females++;
    };

    // the following are static (class) functions that can access the
    // variables above

    Person.getPopulationSize = function() {
        return population.length;
    };

    Person.getManCount = function() {
        return males;
    };

    Person.getWomenCount = function() {
        return females;
    };

    Person.getAverageAge = function() {
        return totalAge / Person.getPopulationSize();
    };

    // this is an instance function (defined in prototype)
    Person.prototype.kill = function() {
        population.remove(this);
        if (this.sex == "M")
            males--;
        else
            females--;
        totalAge -= this.age;
    };

})();
  ]]></code>

  <code id="object1-new" type="js"><![CDATA[
DEFINE_CLASS("Person", null, function(CLASS, PROTO){

    // global ("static", if you wish) variables that are accessible
    // only for the Person object

    var population = [];
    var males = 0;
    var females = 0;
    var totalAge = 0;

    CLASS.CONSTRUCT = function(name, age, sex) {
        this.name = name;
        this.age = age;
        this.sex = sex;
        population.push(this);
        totalAge += age;
        if (sex == "M")
            males++;
        else
            females++;
    };

    // the following are static (class) functions that can access the
    // variables above

    CLASS.getPopulationSize = function() {
        return population.length;
    };

    CLASS.getManCount = function() {
        return males;
    };

    CLASS.getWomenCount = function() {
        return females;
    };

    CLASS.getAverageAge = function() {
        return totalAge / CLASS.getPopulationSize();
    };

    // this is an instance function (defined in prototype)
    PROTO.kill = function() {
        population.remove(this);
        if (this.sex == "M")
            males--;
        else
            females--;
        totalAge -= this.age;
    };

});
  ]]></code>

  <code id="object2" type="js"><![CDATA[
DEFINE_CLASS("Programmer", Person, function(D, P){

    var programmers = [];

    D.CONSTRUCT = function(name, age, sex, languages) {
        this.languages = languages;
        programmers.push(this);
    };

    // static function
    D.getProgrammers = function() {
        return programmers;
    };

    // define a new method, getLanguages
    P.getLanguages = function() {
        return this.languages;
    };

    // override the "kill" function from Person
    P.kill = function() {
        // call the base class' version first
        D.BASE.kill.call(this);
        programmers.remove(this);
    };

});
  ]]></code>

</sample>
