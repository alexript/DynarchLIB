<sample>

  <title>DlPopup</title>

  <text>


    <div class="object-info">
      <table>
        <tr>
          <td class="label">Name:</td>
          <td>DlPopup</td>
        </tr>
        <tr>
          <td class="label">Inherits:</td>
          <td>〈DlContainer〉</td>
        </tr>
        <tr>
          <td class="label">Defined in:</td>
          <td>〈popup.js〉</td>
        </tr>
        <tr>
          <td class="label">Requires:</td>
          <td>〈container.js, geometry.js〉</td>
        </tr>
      </table>
    </div>

    <div class="constructor">
      <h2>Constructor</h2>
   <div class="method">
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">autolink</td>
         <td class="doc"><span default="true" name="autolink">
        If you pass <b>false</b> here, as we do in our sample popup,
        it will affect the way nested (linked) popups work.  See below
        the discussion on linked popups.
      </span>
</td>
         <td class="type">[<b>〈boolean〉</b>]</td>
         <td class="optional"></td>
         <td class="default">true</td>
       </tr>
       <tr>
         <td class="name">focusable</td>
         <td class="doc"><span default="true" name="focusable">
        Popups might contain focusable widgets so it's a good idea to
        declare them “focusable” by default.
      </span>
</td>
         <td class="type">[<b>〈boolean〉</b>]</td>
         <td class="optional"></td>
         <td class="default">true</td>
       </tr>
       <tr>
         <td class="name">level</td>
         <td class="doc"><span default="0" name="level">
        The nesting level for this popup.
      </span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">0</td>
       </tr>
       <tr>
         <td class="name">scroll</td>
         <td class="doc"><span default="{¶      &#34;step2&#34; : 10,¶      &#34;step1&#34; : 5,¶      &#34;speed&#34; : 40¶}" name="scroll">
        Really huge popups (that don't fit on screen) will by default
        provide a vertical scrolling mechanism.  The defaults are 40
        FPS (frames per second) and use 2 speeds: increment from 5 to
        5 pixels on mouseover the arrows and use step 10 pixels when
        the arrow is clicked.
      </span>
</td>
         <td class="type">[<b>〈Hash,boolean〉</b>]</td>
         <td class="optional"></td>
         <td class="default">{<br/>      "step2" : 10,<br/>      "step1" : 5,<br/>      "speed" : 40<br/>}</td>
       </tr>
       <tr>
         <td class="name">zIndex</td>
         <td class="doc"><span default="1000" name="zIndex">
        The starting zIndex for this popup (for level zero).  Note
        that this will actually be computed at run-time; nested popups
        will have higher zIndex-es in order to appear on top of parent
        popups.
      </span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">1000</td>
       </tr>
       <tr>
         <td class="name">align</td>
         <td class="doc"><span default="null" name="align"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">null</td>
       </tr>
       <tr>
         <td class="name">shadows</td>
         <td class="doc"><span default="true" name="shadows"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">true</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
<p/>
        A popup is a container widget that can appear anywhere on
        screen.  It has an absolute position and can have no parent
        (it's element will always be directly under document.body).
        You will rarely need to work with this widget directly; most
        of the times you should use higher level API-s exported by
        <a href='api://DlButtonMenu.xml'>DlButtonMenu</a>, <a href='api://DlHMenu.xml'>DlHMenu</a>, <a href='api://DlVMenu.xml'>DlVMenu</a>, etc.
<p/>
        You can stuck any widgets you want in a popup.  You use it
        like any ordinary <a href='api://DlContainer.xml'>container</a>, and when you want
        it to popup you can call the <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a> method.
<p/>
        A popup is dismissed by a “mousedown” event outside it.  But
        see “linked popups” below for an exceptional case.
<p class='warning'> Don't call constructor!</p>
<p/>
        Note it's not recommended to call the constructor directly.
        Use <a href='api://DlPopup.xml:type=object_method:func=get'>get()</a> instead.  The "caching" section explains why.
<p class='heading'> Caching</p>
<p/>
        Popups are cached.  For example you can have any number of
        <a href='api://DlTooltip.xml'>tooltips</a> through your application but there will
        be only one <a href='api://DlTooltip.xml'>DlTooltip</a> ever instantiated.  This makes sense
        since there won't ever be two tooltips simultaneously
        displayed.  The contents of the popup is updated to display
        the current tooltip right before it's popped up.
<p/>
        In order for the caching to work you should use
        <a href='api://DlPopup.xml:type=static_method:func=get'>DlPopup.get(level)</a> instead of calling the
        constructor directly.  The level specifies the popup “nesting”
        (see linked popups below).  If a popup for the specified level
        doesn't exist, it will be created and returned.  If it already
        exists, it's simply returned.
<p/>
        These widgets are never destroyed through during the lifetime
        of your application and are managed automatically—you don't
        need to care about them.  They are disposed only when the
        application unloads (along with all widgets, actually) in
        order to prevent memory leaks.
<p class='heading'> Subclassing</p>
<p/>
        It's important to note that even though no two popups of the
        same level can exist, this is actually possible if they are of
        different types.  For example, you should be able to attach a
        tooltip to a menu item.  <a href='api://DlTooltip.xml'>DlTooltip</a> is a level zero popup and
        so can be <a href='api://DlPopupMenu.xml'>DlPopupMenu</a>, but it should be allowed for both of
        them to exist and be visible in the same time.
<p/>
        In other words, popups are cached by <em>both</em> type and
        level.
<p/>
        For this reason, in this samples we're using our own popup
        class, which inherits DlPopup.  The following code runs
        automatically in the documentation app:
<p/>
        <div sample="DlPopup1"></div>
<p/>
        Now let's see how to display our first popup:
<p/>
        <div sample="DlPopup2"></div>
<p/>
        When you click the button, it displays a popup at mouse
        position that contains the 3 <a href='api://DlCheckbox.xml'>checkboxes</a> aligned
        in a <a href='api://DlVbox.xml'>vertical box</a>.
<p/>
        Let's <b>note a small weirdness</b>.  We didn't actually define a
        static get() function on OurOwnPopup, but yet it exists and Does
        What We Want :-).  It is added automatically to all objects that
        inherit from DlPopup through the magic of “P.FINISH_OBJECT_DEF” (see
        discussion about FINISH_OBJECT_DEF in
        <a href='sample://define-class.xml'>DEFINE_CLASS</a>).
<p class='heading'> Linked popups</p>
<p/>
        Popups have a particular feature that helps creating submenus.
        You can have a popup and when you click something in that
        popup you want to display a second popup.  Now, if you click
        inside the second popup, both of them should remain on screen.
        The first popup will notice the mousedown event outside it,
        but will realize that this event occurred in a “child” popup
        so it won't close.
<p/>
        By default, this works the other way around too: if you click
        on a parent popup, the child popups will still stay visible.
        It's useful for menus.  However you can change this behavior
        by passing <b>autolink = false</b> at construction time — in
        this case, a click on a parent popup will dismiss child
        popups.
<p/>
        Let's revisit the sample above to include support for linked
        popups:
<p/>
        <div sample="DlPopup3"></div>
<p/>
        So as you can see, what's actually needed is to simply call
        get() again.  It will notice that we already have a level 0
        popup and it will create a level 1 popup and attach it to the
        first one (0).
<p/>
        <a href='api://DlPopup.xml:type=object_method:func=get'>get()</a> normally receives an argument (the popup level) but if
        you call it with no arguments, it will check the currently
        visible popups and return one for the maximum level + 1.
<p class='heading'> Alignment options</p>
<p/>
        So far we displayed popups at mouse position.  That's fine for
        many cases but for menus, for example, we want some better
        control.
<p/>
        The <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a> method accepts an <b>align</b> argument for
        that.  If you pass "mouse" as we did so far, the popup is
        aligned at mouse position.  Here's an example where we align
        the popups to the widgets that triggered them.  When you test
        this sample, move the dialog in positions that would cause
        part of the popup to be offscreen, and note how it falls back
        to another position.
<p/>
        <div sample="DlPopup4"></div>
<p/>
        We will explain the meaning of the arguments in the <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a>
        method.
<p class='heading'> Timeouts</p>
<p/>
        Popups can also be displayed with a timeout.  This is useful
        for tooltips and menus, but we could figure out other uses as
        well.
<p/>
        Here's a sample that displays a tooltip when the button is
        hovered for more than two seconds.
<p/>
        <div sample="DlPopup5"></div>
<p/>
        OK, so much for talking, following is the API reference.
        There are some functions that we didn't document—those are
        used internally and we don't recommend you to mess with them.
        You <em>shouldn't</em> need to call them directly, anyway.
      </span>

     </div>
   </div>
    </div>

    <div class="events">
      <h2>Events</h2>
   <div class="method">
        <h3 id="onHide:object_event">onHide ()
        </h3>
     <div class="doc"><span>
          Triggered when the popup is hidden.
<p/>
          Note that the event is used internally, but you shouldn't
          rely on it; instead, pass your onPopup and/or onHide
          handlers to <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a>.  This is because you never know what
          exact popup widget is returned by get() and since they can
          be reused in cases you didn't foresee, it's not wise to
          register any event handlers directly on the widget.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="onPopup:object_event">onPopup (<span class='param'>args</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">args</td>
         <td class="doc"><span name="args">Arguments that were passed to <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a></span>
</td>
         <td class="type">[<b>〈Hash〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Triggered when the popup is actually displayed.
<p/>
          Note that the event is used internally, but you shouldn't
          rely on it; instead, pass your onPopup and/or onHide
          handlers to <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a>.  This is because you never know what
          exact popup widget is returned by get() and since they can
          be reused in cases you didn't foresee, it's not wise to
          register any event handlers directly on the widget.
        </span>

     </div>
   </div>
    </div>

    <div class="static-methods">
      <h2>Static functions</h2>
   <div class="method">
        <h3 id="clearAll:static_method">DlPopup.clearAll (<span class='param optional'>lev</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">lev</td>
         <td class="doc"><span default="0" name="lev" optional="1">Nesting level</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">0</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Hides all popups of the specified level.  Note that this
          apply for higher levels too, that is, if you pass zero then
          <em>all</em> popups will go away (since nested popups depend
          on their parent popup to be visible).
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="clearAllPopups:static_method">DlPopup.clearAllPopups (<span class='param optional'>except</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">except</td>
         <td class="doc"><span name="except" optional="1">Popup ID-s</span>
</td>
         <td class="type">[<b>〈Hash〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Hides all popups (and their children) except those specified
          as keys in the <b>except</b> hash.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="get:static_method">DlPopup.get (<span class='param optional'>level</span>, <span class='param optional'>nocreate</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">level</td>
         <td class="doc"><span default="null" name="level" optional="1">Popup level that you're interested in</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">null</td>
       </tr>
       <tr>
         <td class="name">nocreate</td>
         <td class="doc"><span default="false" name="nocreate" optional="1">Don't create?</span>
</td>
         <td class="type">[<b>〈boolean〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">false</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Checks that a popup of the given level exists.  If
          <b>level</b> is not given or null, it will be assumed to be
          the number of currently visible popups (therefore normally
          it will create a new popup).
<p/>
          If such a popup exists, it is returned.  Otherwise, if
          <b>nocreate</b> is false (default) it will be created and
          returned.  If <b>nocreate</b> is true and the popup didn't
          already exist, then this function will return <b>null</b>.
<p/>
          This function is copied as a static function to all derived
          classes.
        </span>

     </div>
   </div>
    </div>

    <div class="object-methods">
      <h2>Instance methods</h2>
   <div class="method">
        <h3 id="attachToPopup:object_method">attachToPopup (<span class='param'>popup</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">popup</td>
         <td class="doc"><span name="popup">Parent popup</span>
</td>
         <td class="type">[<b>〈DlPopup〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Attach the current popup to the given one.  This is used
          internally to setup nesting.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="cancel:object_method">cancel ()
        </h3>
     <div class="doc"><span>
          If <a href='api://DlPopup.xml:type=object_method:func=popup'>popup()</a> was called with a timeout that didn't yet
          occur, this function will cancel it.  Otherwise it does
          nothing.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="checkXPos:object_method">checkXPos (<span class='param'>p</span>, <span class='param'>rect</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">p</td>
         <td class="doc"><span name="p"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">rect</td>
         <td class="doc"><span name="rect"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Used internally.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="checkYPos:object_method">checkYPos (<span class='param'>p</span>, <span class='param'>rect</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">p</td>
         <td class="doc"><span name="p"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">rect</td>
         <td class="doc"><span name="rect"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Used internally.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="detachPopup:object_method">detachPopup ()
        </h3>
     <div class="doc"><span>
          Detach the current popup from its parent, if there is any.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="getContentElement:object_method">getContentElement ()
        <div class="overrides">
             (overrides <a href="api://DlWidget.xml:type=object_method:func=getContentElement">getContentElement in DlWidget</a>)
        </div>
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="getToplevelPopup:object_method">getToplevelPopup ()
        </h3>
     <div class="doc"><span>
          Returns the toplevel popup that this is attached to.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="hide:object_method">hide (<span class='param optional'>timeout</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">timeout</td>
         <td class="doc"><span default="null" name="timeout" optional="1">milliseconds</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">null</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Hide this popup.  Optionally wait the specified number of
          milliseconds (<b>timeout</b>).  During this time you can
          <a href='api://DlPopup.xml:type=object_method:func=cancel'>cancel()</a> the operation.  If timeout is null (default) then
          it's hidden immediately.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="initDOM:object_method">initDOM ()
        <div class="overrides">
             (overrides <a href="api://DlWidget.xml:type=object_method:func=initDOM">initDOM in DlWidget</a>)
        </div>
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="popup:object_method">popup (args)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">onBeforePopup</td>
         <td class="doc"><span forced="1" name="onBeforePopup" optional="1">
          Function that gets called before the content of the widget
          is updated.  Receives all these arguments as a hash.
        </span>
</td>
         <td class="type">[<b>〈Function〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">onPopup</td>
         <td class="doc"><span forced="1" name="onPopup" optional="1">
          Handler that gets called after the content of the widget was
          updated.  Receives all these arguments as a hash.
        </span>
</td>
         <td class="type">[<b>〈Function〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">onHide</td>
         <td class="doc"><span forced="1" name="onHide" optional="1">
          Handler that gets called when the popup is hidden.  Receives
          all these arguments as a hash.
        </span>
</td>
         <td class="type">[<b>〈Function〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">content</td>
         <td class="doc"><span forced="1" name="content">
          Content of the widget.  See <a href='api://DlWidget.xml:type=object_method:func=setContent'>DlWidget::setContent()</a> for a
          description of supported types.
        </span>
</td>
         <td class="type">[<b>〈String,Array,HTMLElement,DlWidget〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">anchor</td>
         <td class="doc"><span forced="1" name="anchor">
          A DOM element to anchor this popup to.  This is used if
          align is not "mouse", but currently you <em>have</em> to
          pass it in any case.
        </span>
</td>
         <td class="type">[<b>〈HTMLElement〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">align</td>
         <td class="doc"><span forced="1" name="align">
          Alignment options.  For Strings, currently only "mouse" is
          supported, which means the popup will show up at the cursor
          position.
<p/>
          If it's a Hash it must define the following keys:
<p/>
          <ul>
            <li>prefer — the preferred align option</li>
            <li>fallX1 — fallback for left side (x &lt; 0)</li>
            <li>fallX2 — fallback for right side (x &gt; window_width)</li>
            <li>fallY1 — fallback for top side (y &lt; 0)</li>
            <li>fallY2 — fallback for bottom side (y &gt; window_height)</li>
          </ul>
<p/>
          The values of these keys are Strings with 2 characters.  The
          first one specifies the vertical alignment and the second
          one specifies the horizontal alignment.  See some alignment
          pictures below.
        </span>
</td>
         <td class="type">[<b>〈String,Hash〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">mousePos</td>
         <td class="doc"><span forced="1" name="mousePos" optional="1">
          When align is "mouse" you can optionally override the mouse
          position using this argument — so the widget can be
          displayed exactly where you want.
        </span>
</td>
         <td class="type">[<b>〈Hash〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">timeout</td>
         <td class="doc"><span forced="1" name="timeout" optional="1">
          If you want the popup to be displayed after a certain time,
          pass the number of milliseconds here.  Otherwise it pops up
          immediately.
        </span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">args</td>
         <td class="doc"><span name="args"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Note that this method receives parameters in “constructor
          style”, that is, it's actually a single parameter which is a
          hash table containing options described above.
<p/>
          We exemplified this method before so we will only explain
          the <b>align</b> option here, since it's the most complex
          one.  The following pictures list all possible combinations
          for vertical/horizontal alignment of the popup against the
          anchor.  The first character signifies vertical alignment,
          and the second one is the horizontal alignment.
<p/>
          <table cellspacing="10">
<p/>
            <tr>
              <td class="big monospace">"BR"</td>
              <td><img src="jsdoc/img/popup/BBRR.png"></img></td>
              <td>the popup is completely below and completely to the right of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Br"</td>
              <td><img src="jsdoc/img/popup/BBr.png"></img></td>
              <td>the popup is completely below and left aligned with the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Bc"</td>
              <td><img src="jsdoc/img/popup/BBc.png"></img></td>
              <td>the popup is completely below and centered horizontally with the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Bl"</td>
              <td><img src="jsdoc/img/popup/BBl.png"></img></td>
              <td>the popup is completely below and right aligned with the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"BL"</td>
              <td><img src="jsdoc/img/popup/BBLL.png"></img></td>
              <td>the popup is completely below and completely to the left of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"bL"</td>
              <td><img src="jsdoc/img/popup/bLL.png"></img></td>
              <td>the popup is below (top-aligned) and completely to the left of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"cL"</td>
              <td><img src="jsdoc/img/popup/cLL.png"></img></td>
              <td>the popup is centered vertically and completely to the left of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"tL"</td>
              <td><img src="jsdoc/img/popup/tLL.png"></img></td>
              <td>the popup is above (bottom aligned) and completely to the left of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"TL"</td>
              <td><img src="jsdoc/img/popup/TTLL.png"></img></td>
              <td>the popup is completely above and completely to the left of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Tl"</td>
              <td><img src="jsdoc/img/popup/TTl.png"></img></td>
              <td>the popup is completely above and to the left (right-aligned) of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Tc"</td>
              <td><img src="jsdoc/img/popup/TTc.png"></img></td>
              <td>the popup is completely above and centered horizontally with the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"Tr"</td>
              <td><img src="jsdoc/img/popup/TTr.png"></img></td>
              <td>the popup is completely above and to the right (left-aligned) of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"TR"</td>
              <td><img src="jsdoc/img/popup/TTRR.png"></img></td>
              <td>the popup is completely above and completely to the right of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"tR"</td>
              <td><img src="jsdoc/img/popup/tRR.png"></img></td>
              <td>the popup is above (bottom-aligned) and completely to the right of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"cR"</td>
              <td><img src="jsdoc/img/popup/cRR.png"></img></td>
              <td>the popup is vertically centered and completely to the right of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"bR"</td>
              <td><img src="jsdoc/img/popup/bRR.png"></img></td>
              <td>the popup is below (top-aligned) and completely to the right of the anchor</td>
            </tr>
<p/>
            <tr>
              <td class="big monospace">"cc"</td>
              <td><img src="jsdoc/img/popup/cc.png"></img></td>
              <td>the popup is vertically and horizontally centered to the anchor</td>
            </tr>
<p/>
          </table>
<p class='heading'> The fallback options</p>
<p/>
          To ensure proper functionality you must pass fallX1, fallX2,
          fallY1 and fallY2 to align options as well.  They have the
          same syntax as the <b>prefer</b> option and specify a
          fallback mechanism.  X1 means when the popup goes off-screen
          at the left, X2 for the right.  Y1 means when the popup goes
          off-screen at the top, and Y2 for the bottom.  A "_"
          character specifies that the respective position should not
          be modified (i.e. use the option in "prefer" when possible).
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="showAt:object_method">showAt (<span class='param'>anchor</span>, <span class='param'>align</span>, <span class='param'>mousePos</span>, <span class='param'>shift</span>, <span class='param'>fluid</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">anchor</td>
         <td class="doc"><span name="anchor"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">align</td>
         <td class="doc"><span name="align"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">mousePos</td>
         <td class="doc"><span name="mousePos"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">shift</td>
         <td class="doc"><span name="shift"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">fluid</td>
         <td class="doc"><span name="fluid"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_bestPosition:object_method">_bestPosition (<span class='param'>align</span>, <span class='param'>p</span>, <span class='param'>sa</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">align</td>
         <td class="doc"><span name="align"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">p</td>
         <td class="doc"><span name="p"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">sa</td>
         <td class="doc"><span name="sa"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_createElement:object_method">_createElement ()
        <div class="overrides">
             (overrides <a href="api://DlContainer.xml:type=object_method:func=_createElement">_createElement in DlContainer</a>)
        </div>
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_doAlign:object_method">_doAlign (<span class='param'>align</span>, <span class='param'>p</span>, <span class='param'>sa</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">align</td>
         <td class="doc"><span name="align"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">p</td>
         <td class="doc"><span name="p"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">sa</td>
         <td class="doc"><span name="sa"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_handle_focusKeys:object_method">_handle_focusKeys (<span class='param'>ev</span>)
        <div class="overrides">
             (overrides <a href="api://DlWidget.xml:type=object_method:func=_handle_focusKeys">_handle_focusKeys in DlWidget</a>)
        </div>
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">ev</td>
         <td class="doc"><span name="ev"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scroll_el:object_method">_scroll_el (<span class='param'>p</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">p</td>
         <td class="doc"><span name="p"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scroll_setup:object_method">_scroll_setup ()
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scroll_visibile:object_method">_scroll_visibile (<span class='param'>vis</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">vis</td>
         <td class="doc"><span name="vis"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scrollDoubleSpeed:object_method">_scrollDoubleSpeed (<span class='param'>dbl</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">dbl</td>
         <td class="doc"><span name="dbl"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scrollSetArrowState:object_method">_scrollSetArrowState ()
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_scrollStopHandler:object_method">_scrollStopHandler ()
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
   <div class="method">
        <h3 id="_setListeners:object_method">_setListeners ()
        <div class="overrides">
             (overrides <a href="api://DlContainer.xml:type=object_method:func=_setListeners">_setListeners in DlContainer</a>)
        </div>
        </h3>
     <div class="doc"><span></span>

     </div>
   </div>
    </div>

  </text>
<code autorun="true" id="DlPopup1" type="js">
          // declare our popup class
          OurOwnPopup.inherits(DlPopup);
          function OurOwnPopup(args) {
              // don't use autolinking, see "linked popups"
              args.autolink = false;
              DlPopup.call(this, args); // call base constructor
              // popups have no visual style, so let's set some here
              this.setStyle({
                  border     : "1px solid red",
                  background : "#fed",
                  padding    : "3px"
              });
          };
          // and export it
          window.OurOwnPopup = OurOwnPopup;
        </code>
<code canrun="true" id="DlPopup2" type="js">
          // this box will be displayed in the popup
          var popup_content = new DlVbox({});
          new DlCheckbox({ parent: popup_content, label: "Foo option" });
          new DlCheckbox({ parent: popup_content, label: "Bar option" });
          new DlCheckbox({ parent: popup_content, label: "Baz option" });

          var btn = new DlButton({ parent: getDocCanvas(), label: "Show popup" });
          btn.addEventListener("onClick", function() {
              var p = OurOwnPopup.get();
              p.popup({
                  timeout  : 0,
                  content  : popup_content,
                  align    : "mouse",
                  anchor   : this.getElement(),
                  widget   : this
              });
          });
        </code>
<code canrun="true" id="DlPopup3" type="js"><![CDATA[
          var btn = new DlButton({ parent: getDocCanvas(), label: "Show popup" });
          var popup_content = new DlVbox({});
          new DlCheckbox({ parent: popup_content, label: "Foo option" });
          new DlCheckbox({ parent: popup_content, label: "Bar option" });
          new DlCheckbox({ parent: popup_content, label: "Baz option" });
          popup_content.addSeparator();

          // this button triggers a second popup
          var b2 = new DlButton({ parent: popup_content, label: "New popup" });

          btn.addEventListener("onClick", function() {
              var p = OurOwnPopup.get();
              p.popup({
                  timeout : 0,
                  content : popup_content,
                  align   : "mouse",
                  anchor  : this.getElement(),
                  widget  : this
              });
          });

          b2.addEventListener("onClick", function() {
              var p = OurOwnPopup.get();
              p.popup({
                  timeout  : 0,
                  content  : "<div style='padding: 5px'>HTML <b>popup</b>!</div>",
                  align    : "mouse",
                  anchor   : this.getElement(),
                  widget   : this
              });
          });
        ]]></code>
<code canrun="true" id="DlPopup4" type="js"><![CDATA[
          var btn = new DlButton({ parent: getDocCanvas(), label: "Show popup" });
          var popup_content = new DlVbox({});
          new DlCheckbox({ parent: popup_content, label: "Foo option" });
          new DlCheckbox({ parent: popup_content, label: "Bar option" });
          new DlCheckbox({ parent: popup_content, label: "Baz option" });
          popup_content.addSeparator();

          // this button triggers a second popup
          var b2 = new DlButton({ parent: popup_content, label: "New popup" });

          btn.addEventListener("onClick", function() {
              var p = OurOwnPopup.get();
              p.popup({
                  timeout : 0,
                  content : popup_content,
                  align   : {
                      prefer: "Tc", // prefer ABOVE the widget (T) and CENTER (c)
                      fallX1: "_r",
                      fallX2: "_l",
                      fallY1: "B_",
                      fallY2: "T_"
                  },
                  anchor  : this.getElement(),
                  widget  : this
              });
          });

          b2.addEventListener("onClick", function() {
              var p = OurOwnPopup.get();
              p.popup({
                  timeout  : 0,
                  content  : "<div style='padding: 5px'>HTML <b>popup</b>!</div>",
                  align    : {
                      prefer : "cR", // prefer CENTERED (c) vertically and at the RIGHT (R)
                      fallX1 : "_R",
                      fallX2 : "_L",
                      fallY1 : "b_",
                      fallY2 : "t_"
                  },
                  anchor   : this.getElement(),
                  widget   : this
              });
          });
        ]]></code>
<code canrun="true" id="DlPopup5" type="js"><![CDATA[
          var btn = new DlButton({ label: "Buy our product!", parent: getDocCanvas() });
          btn.addEventListener("onMouseEnter", function() {
              this._popup = OurOwnPopup.get();
              this._popup.popup({
                  timeout : 2000, // two thousand milliseconds
                  align   : "mouse",
                  anchor  : this.getElement(),
                  widget  : this,
                  content : ( "<div style='padding: 5px'>Still not convinced?<br />" +
                              "<b>Blah Blah Blah...  <a href='#'>convince me</a></b></div>" )
              });
          });
          btn.addEventListener("onMouseLeave", function() {
              if (this._popup) {
                  this._popup.cancel();
                  this._popup = null;
              }
          });
        ]]></code>


</sample>




