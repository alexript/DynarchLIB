<sample>

  <title>DlAnimation</title>

  <text>


    <div class="object-info">
      <table>
        <tr>
          <td class="label">Name:</td>
          <td>DlAnimation</td>
        </tr>
        <tr>
          <td class="label">Inherits:</td>
          <td>〈DlEventProxy〉</td>
        </tr>
        <tr>
          <td class="label">Defined in:</td>
          <td>〈animation.js〉</td>
        </tr>
        <tr>
          <td class="label">Requires:</td>
          <td>〈〉</td>
        </tr>
      </table>
    </div>

    <div class="constructor">
      <h2>Constructor</h2>
   <div class="method">
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">length</td>
         <td class="doc"><span name="length">Animation lengths (number of frames)</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">fps</td>
         <td class="doc"><span name="fps">Animation speed (frames per second)</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
        A DlAnimation object is actually an useful wrapper around the
        browser's setInterval() function.  It will emit the "onUpdate"
        event whenever the animation should be updated, passing
        appropriate information.  From your own code you would hook on
        this event and update an element state, such as position, size
        or colors, etc. to implement animations or fade in/out
        effects.
<p/>
        Note that this is quite abstract--it doesn't implement various
        kinds of special effects.  But it's easy to make your own.
        DlAnimation also provides some “easing functions” that you can
        use to calculate smooth accelerated or decelerated animations.
<p class='heading'> Easing functions</p>
<p/>
        An easing function is a function that takes one argument
        <b>t</b> (“time”) and returns the “position” that the
        animation should take at the given time.  Both time and
        position are floating number values between 0 and 1.
<p/>
        <ul>
          <li>
            <p>
              <b>Time</b> — 0 means the first animation frame, 1 means
              the last animation frame.  Time is between 0 and 1 and
              any intermediary positions are calculated based on the
              current frame number.  For example, if you have an
              animation of 40 frames, then your easing function will
              be called 40 times with these <b>time</b> values, in
              order:
            </p>
            <p>
              0, 1/40, 2/40, 3/40, ... 40/40 (1)
            </p>
          </li>
          <li>
            <p>
              <b>Position</b> — each time it's called, your function
              should return a floating point value between 0 and 1
              which represents the position of the animation at the
              given time.
            </p>
            <p>
              For example, if you want a flat animation (no
              acceleration and no deceleration), you can simply return
              <b>time</b>.
            </p>
          </li>
        </ul>
<p/>
        Code based on DlAnimation should <a href='api://Number.xml:type=object_method:func=map'>map</a> the
        returned position to the initial and final values, and set the
        element's position accordingly.  Hopefully the next sample
        clears it all.
<p class='heading'> Sample</p>
<p/>
        Following there is a pretty complete sample to demonstrate our
        easing functions, as well as general usage of this object.
        Click on the white area to test animations.
<p/>
        <div sample="DlAnimation2"></div>
      </span>

     </div>
   </div>
    </div>

    <div class="events">
      <h2>Events</h2>
   <div class="method">
        <h3 id="onPause:object_event">onPause ()
        </h3>
     <div class="doc"><span>
          Called when the animation is paused (see <a href='api://DlAnimation.xml:type=object_method:func=pause'>pause()</a>).
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="onStart:object_event">onStart ()
        </h3>
     <div class="doc"><span>
          Called when the animation starts (see <a href='api://DlAnimation.xml:type=object_method:func=start'>start()</a>).
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="onStop:object_event">onStop ()
        </h3>
     <div class="doc"><span>
          Called when the animation stops (see <a href='api://DlAnimation.xml:type=object_method:func=stop'>stop()</a>).
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="onUpdate:object_event">onUpdate ()
        </h3>
     <div class="doc"><span>
          Called when the animation needs update.
        </span>

     </div>
   </div>
    </div>

    <div class="static-methods">
      <h2>Static functions</h2>
   <div class="method">
        <h3 id="accel_ab:static_method">DlAnimation.accel_ab (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Easing function for an animation that accelerates fast at
          starts, and decelerates slowly at end.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="accel_b:static_method">DlAnimation.accel_b (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Decelerated move.  The name is misleading.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="bounce_b:static_method">DlAnimation.bounce_b (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Bouncing move.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="elastic_b:static_method">DlAnimation.elastic_b (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Elastic move.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="elastic_b_custom:static_method">DlAnimation.elastic_b_custom (<span class='param'>elasticity</span>, <span class='param'>stability</span>, <span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">elasticity</td>
         <td class="doc"><span name="elasticity"></span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">stability</td>
         <td class="doc"><span name="stability"></span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          You can use this function to customize an elastic move.
          Create a closure that sends elasticity and stability, like
          this:
<p/>
          <div sample="DlAnimation1"></div>
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="magnetic:static_method">DlAnimation.magnetic (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t">Time [0..1]</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          This looks similar to elastic, but it seems to suggest a
          magnetic attraction between the moving object and the final
          position.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="shake:static_method">DlAnimation.shake (<span class='param'>t</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">t</td>
         <td class="doc"><span name="t"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span></span>

     </div>
   </div>
    </div>

    <div class="object-methods">
      <h2>Instance methods</h2>
   <div class="method">
        <h3 id="getPos:object_method">getPos (<span class='param optional'>f</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">f</td>
         <td class="doc"><span default="null" name="f" optional="1">Easing function</span>
</td>
         <td class="type">[<b>〈Function,String〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">null</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Returns the animation position through function <b>f</b>.
          If <b>f</b> is not passed, it uses the easing function
          passed at <a href='api://DlAnimation.xml:type=object_method:func=start'>start()</a>.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="start:object_method">start (<span class='param'>length</span>, <span class='param'>fps</span>, <span class='param optional'>func</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">length</td>
         <td class="doc"><span name="length">length of the animation</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">fps</td>
         <td class="doc"><span name="fps">speed of the animation</span>
</td>
         <td class="type">[<b>〈Number〉</b>]</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
       <tr>
         <td class="name">func</td>
         <td class="doc"><span default="null" name="func" optional="1">easing function</span>
</td>
         <td class="type">[<b>〈String,Function〉</b>]</td>
         <td class="optional">optional</td>
         <td class="default">null</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Starts the animation.  Triggers "onStart" event.
        </span>

     </div>
   </div>
   <div class="method">
        <h3 id="stop:object_method">stop (<span class='param'>finished</span>)
        </h3>
   <div class="params">
     <table>
       <tr class="head">
         <td class="name">Arguments</td>
         <td class="doc">Notes</td>
         <td class="type">Type</td>
         <td class="optional"></td>
         <td class="default">Default</td>
       </tr>
       <tr>
         <td class="name">finished</td>
         <td class="doc"><span name="finished"></span>
</td>
         <td class="type">—</td>
         <td class="optional"></td>
         <td class="default">—</td>
       </tr>
     </table>
   </div>
     <div class="doc"><span>
          Stops the animation and triggers "onStop" event.  The
          <b>finished</b> argument is passed to "onStop".  It is used
          internally: when the animation ends, stop(true) is called by
          the framework and "onStop" handlers will get <b>true</b>,
          thus knowing that the animation was successfully finished.
          If you call stop() manually you should not pass an argument.
        </span>

     </div>
   </div>
    </div>

  </text>
<code id="DlAnimation1" type="js">
            var veryElastic = DlAnimation.easing.elastic_b_custom.$C(10, 5);
            // now use veryElastic as your easing function:
            anim.start(length, fps, veryElastic);
          </code>
<code canrun="true" id="DlAnimation2" type="js">
          var dlg = new DlDialog({ title: "Animation sample", resizable: true, quitBtn: "destroy" });
          var layout = new DlLayout({ parent: dlg, outerSpace: 5 });
          var toolbar_cont = new DlContainer({});
          var toolbar = new DlHbox({ parent: toolbar_cont });
          var options = [
            { label: "accel_ab"  , value: "accel_ab"  },
            { label: "accel_b"   , value: "accel_b"   },
            { label: "bounce_b"  , value: "bounce_b"  },
            { label: "elastic_b" , value: "elastic_b" },
            { label: "magnetic"  , value: "magnetic"  },
            { label: "shake"     , value: "shake"     }
          ];
          new DlLabel({ parent: toolbar, label: "Easing function:" });
          var select = new DlRadioSelect({ parent: toolbar, options: options, value: "accel_ab" });

          toolbar.addSpace();

          new DlLabel({ parent: toolbar, label: "Length:" });
          var lengthEntry = new DlSpinner({ parent: toolbar, value: "40", size: 3 });

          toolbar.addSpace();

          new DlLabel({ parent: toolbar, label: "FPS:", tooltip: "Frames per second" });
          var fpsEntry = new DlSpinner({ parent: toolbar, value: "50", size: 3 });

          var canvas = new DlContainer({ parent: toolbar });
          canvas.setStyle({ background : "white",
                            border     : "1px solid black",
                            position   : "relative" });

          var widget = new DlWidget({ parent: canvas });
          widget.setStyle({ position   : "absolute",
                            left       : "0px",
                            top        : "0px",
                            width      : "20px",
                            height     : "20px",
                            border     : "1px solid red",
                            background : "yellow" });

          // here we create the animation object
          // note the onUpdate handler
          var anim = new DlAnimation();
          anim.addEventListener("onUpdate", function(t) {
            // retrieve the name of the easing function
            var func = select.getValue();
            // retrieve a reference to the function itself
            func = DlAnimation.easing[func];
            // calculate the current position (0..1) based on the easing function
            var pos = func(t);
            // map the position to actual X and Y coordinates on screen
            // this uses 〈Number::map()〉
            var x = pos.map(start_x, stop_x);
            var y = pos.map(start_y, stop_y);
            // finally, reposition the widget
            widget.setStyle({ left : x + "px",
                              top  : y + "px" });
          });

          // these will hold initial and final position of the widget
          var start_x, stop_x, start_y, stop_y;

          // in this handler we're starting our animation
          canvas.addEventListener("onMouseDown", function(ev) {
            // first off, save the widget's current position
            var pos = widget.getOffsetPos();
            start_x = pos.x;
            start_y = pos.y;
            // now compute the end position, relative to the canvas
            pos = ev.computePos(this);
            stop_x = pos.x - 11; // subtract half of widget size
            stop_y = pos.y - 11;
            // and now start animation based on current "length" and "FPS" values
            anim.start(lengthEntry.getValue(), fpsEntry.getValue());
          });

          layout.packWidget(toolbar_cont, { pos: "top", after: 5 });
          layout.packWidget(canvas, { pos: "bottom", fill: "*" });
          layout.setSize({ x: 400, y: 300 });
          dlg.centerOnParent();
          dlg.show();
        </code>


</sample>




